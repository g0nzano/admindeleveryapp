import { Directive, Input, Output, EventEmitter, HostListener, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export function calculateAutoPositioning(elBounds, triggerElBounds) {
    // Defaults
    let usePositionX = 'right';
    let usePositionY = 'bottom';
    // Calculate collisions
    const { height, width } = elBounds;
    const { top, left } = triggerElBounds;
    const bottom = top + triggerElBounds.height;
    const right = left + triggerElBounds.width;
    const collisionTop = top - height < 0;
    const collisionBottom = bottom + height > (window.innerHeight || document.documentElement.clientHeight);
    const collisionLeft = left - width < 0;
    const collisionRight = right + width > (window.innerWidth || document.documentElement.clientWidth);
    const collisionAll = collisionTop && collisionBottom && collisionLeft && collisionRight;
    // Generate X & Y position values
    if (collisionBottom) {
        usePositionY = 'top';
    }
    if (collisionTop) {
        usePositionY = 'bottom';
    }
    if (collisionLeft) {
        usePositionX = 'right';
    }
    if (collisionRight) {
        usePositionX = 'left';
    }
    // Choose the largest gap available
    if (collisionAll) {
        const postions = ['left', 'right', 'top', 'bottom'];
        return postions.reduce((prev, next) => elBounds[prev] > elBounds[next] ? prev : next);
    }
    if ((collisionLeft && collisionRight)) {
        if (collisionTop) {
            return 'bottom';
        }
        if (collisionBottom) {
            return 'top';
        }
        return top > bottom ? 'top' : 'bottom';
    }
    if ((collisionTop && collisionBottom)) {
        if (collisionLeft) {
            return 'right';
        }
        if (collisionRight) {
            return 'left';
        }
        return left > right ? 'left' : 'right';
    }
    return `${usePositionY}-${usePositionX}`;
}
export function detectIE() {
    let ua = '';
    if (typeof navigator !== 'undefined') {
        ua = navigator.userAgent.toLowerCase();
    }
    const msie = ua.indexOf('msie ');
    if (msie > 0) {
        // IE 10 or older => return version number
        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    }
    // Other browser
    return false;
}
export class TextDirective {
    constructor() {
        this.newValue = new EventEmitter();
    }
    inputChange(event) {
        const value = event.target.value;
        if (this.rg === undefined) {
            this.newValue.emit(value);
        }
        else {
            const numeric = parseFloat(value);
            this.newValue.emit({ v: numeric, rg: this.rg });
        }
    }
}
TextDirective.ɵfac = function TextDirective_Factory(t) { return new (t || TextDirective)(); };
TextDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TextDirective, selectors: [["", "text", ""]], hostBindings: function TextDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function TextDirective_input_HostBindingHandler($event) { return ctx.inputChange($event); });
    } }, inputs: { rg: "rg", text: "text" }, outputs: { newValue: "newValue" } });
TextDirective.propDecorators = {
    rg: [{ type: Input }],
    text: [{ type: Input }],
    newValue: [{ type: Output }],
    inputChange: [{ type: HostListener, args: ['input', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextDirective, [{
        type: Directive,
        args: [{
                selector: '[text]'
            }]
    }], function () { return []; }, { newValue: [{
            type: Output
        }], inputChange: [{
            type: HostListener,
            args: ['input', ['$event']]
        }], rg: [{
            type: Input
        }], text: [{
            type: Input
        }] }); })();
export class SliderDirective {
    constructor(elRef) {
        this.elRef = elRef;
        this.dragEnd = new EventEmitter();
        this.dragStart = new EventEmitter();
        this.newValue = new EventEmitter();
        this.listenerMove = (event) => this.move(event);
        this.listenerStop = () => this.stop();
    }
    mouseDown(event) {
        this.start(event);
    }
    touchStart(event) {
        this.start(event);
    }
    move(event) {
        event.preventDefault();
        this.setCursor(event);
    }
    start(event) {
        this.setCursor(event);
        event.stopPropagation();
        document.addEventListener('mouseup', this.listenerStop);
        document.addEventListener('touchend', this.listenerStop);
        document.addEventListener('mousemove', this.listenerMove);
        document.addEventListener('touchmove', this.listenerMove);
        this.dragStart.emit();
    }
    stop() {
        document.removeEventListener('mouseup', this.listenerStop);
        document.removeEventListener('touchend', this.listenerStop);
        document.removeEventListener('mousemove', this.listenerMove);
        document.removeEventListener('touchmove', this.listenerMove);
        this.dragEnd.emit();
    }
    getX(event) {
        const position = this.elRef.nativeElement.getBoundingClientRect();
        const pageX = (event.pageX !== undefined) ? event.pageX : event.touches[0].pageX;
        return pageX - position.left - window.pageXOffset;
    }
    getY(event) {
        const position = this.elRef.nativeElement.getBoundingClientRect();
        const pageY = (event.pageY !== undefined) ? event.pageY : event.touches[0].pageY;
        return pageY - position.top - window.pageYOffset;
    }
    setCursor(event) {
        const width = this.elRef.nativeElement.offsetWidth;
        const height = this.elRef.nativeElement.offsetHeight;
        const x = Math.max(0, Math.min(this.getX(event), width));
        const y = Math.max(0, Math.min(this.getY(event), height));
        if (this.rgX !== undefined && this.rgY !== undefined) {
            this.newValue.emit({ s: x / width, v: (1 - y / height), rgX: this.rgX, rgY: this.rgY });
        }
        else if (this.rgX === undefined && this.rgY !== undefined) {
            this.newValue.emit({ v: y / height, rgY: this.rgY });
        }
        else if (this.rgX !== undefined && this.rgY === undefined) {
            this.newValue.emit({ v: x / width, rgX: this.rgX });
        }
    }
}
SliderDirective.ɵfac = function SliderDirective_Factory(t) { return new (t || SliderDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef)); };
SliderDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SliderDirective, selectors: [["", "slider", ""]], hostBindings: function SliderDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mousedown", function SliderDirective_mousedown_HostBindingHandler($event) { return ctx.mouseDown($event); })("touchstart", function SliderDirective_touchstart_HostBindingHandler($event) { return ctx.touchStart($event); });
    } }, inputs: { rgX: "rgX", rgY: "rgY", slider: "slider" }, outputs: { dragEnd: "dragEnd", dragStart: "dragStart", newValue: "newValue" } });
SliderDirective.ctorParameters = () => [
    { type: ElementRef }
];
SliderDirective.propDecorators = {
    rgX: [{ type: Input }],
    rgY: [{ type: Input }],
    slider: [{ type: Input }],
    dragEnd: [{ type: Output }],
    dragStart: [{ type: Output }],
    newValue: [{ type: Output }],
    mouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
    touchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SliderDirective, [{
        type: Directive,
        args: [{
                selector: '[slider]'
            }]
    }], function () { return [{ type: ElementRef }]; }, { dragEnd: [{
            type: Output
        }], dragStart: [{
            type: Output
        }], newValue: [{
            type: Output
        }], mouseDown: [{
            type: HostListener,
            args: ['mousedown', ['$event']]
        }], touchStart: [{
            type: HostListener,
            args: ['touchstart', ['$event']]
        }], rgX: [{
            type: Input
        }], rgY: [{
            type: Input
        }], slider: [{
            type: Input
        }] }); })();
export class SliderPosition {
    constructor(h, s, v, a) {
        this.h = h;
        this.s = s;
        this.v = v;
        this.a = a;
    }
}
export class SliderDimension {
    constructor(h, s, v, a) {
        this.h = h;
        this.s = s;
        this.v = v;
        this.a = a;
    }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvbGliL3NyYy9saWIvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBa0JqRyxNQUFNLFVBQVUsd0JBQXdCLENBQUMsUUFBMkIsRUFBRSxlQUFrQztBQUFJLElBQzFHLFdBQVc7QUFDYixJQUFFLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQztBQUM3QixJQUFFLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQztBQUM5QixJQUFFLHVCQUF1QjtBQUN6QixJQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsUUFBUSxDQUFDO0FBQ3JDLElBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxlQUFlLENBQUM7QUFDeEMsSUFBRSxNQUFNLE1BQU0sR0FBRyxHQUFHLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQztBQUM5QyxJQUFFLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDO0FBQzdDLElBQ0UsTUFBTSxZQUFZLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDeEMsSUFBRSxNQUFNLGVBQWUsR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzFHLElBQUUsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDekMsSUFBRSxNQUFNLGNBQWMsR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFD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QUMsR0FBRCxDQUFDLENBQVE7QUFBQyxJQUFFLENBQUM7QUFDeEYsQ0FBQztBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBDb2xvck1vZGUgPSAnY29sb3InIHwgJ2MnIHwgJzEnIHxcbiAgJ2dyYXlzY2FsZScgfCAnZycgfCAnMicgfCAncHJlc2V0cycgfCAncCcgfCAnMyc7XG5cbmV4cG9ydCB0eXBlIEFscGhhQ2hhbm5lbCA9ICdlbmFibGVkJyB8ICdkaXNhYmxlZCcgfCAnYWx3YXlzJyB8ICdmb3JjZWQnO1xuXG5leHBvcnQgdHlwZSBCb3VuZGluZ1JlY3RhbmdsZSA9IHtcbiAgdG9wOiBudW1iZXI7XG4gIGJvdHRvbTogbnVtYmVyO1xuICBsZWZ0OiBudW1iZXI7XG4gIHJpZ2h0OiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICB3aWR0aDogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgT3V0cHV0Rm9ybWF0ID0gJ2F1dG8nIHwgJ2hleCcgfCAncmdiYScgfCAnaHNsYSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVBdXRvUG9zaXRpb25pbmcoZWxCb3VuZHM6IEJvdW5kaW5nUmVjdGFuZ2xlLCB0cmlnZ2VyRWxCb3VuZHM6IEJvdW5kaW5nUmVjdGFuZ2xlKTogc3RyaW5nIHtcbiAgLy8gRGVmYXVsdHNcbiAgbGV0IHVzZVBvc2l0aW9uWCA9ICdyaWdodCc7XG4gIGxldCB1c2VQb3NpdGlvblkgPSAnYm90dG9tJztcbiAgLy8gQ2FsY3VsYXRlIGNvbGxpc2lvbnNcbiAgY29uc3QgeyBoZWlnaHQsIHdpZHRoIH0gPSBlbEJvdW5kcztcbiAgY29uc3QgeyB0b3AsIGxlZnQgfSA9IHRyaWdnZXJFbEJvdW5kcztcbiAgY29uc3QgYm90dG9tID0gdG9wICsgdHJpZ2dlckVsQm91bmRzLmhlaWdodDtcbiAgY29uc3QgcmlnaHQgPSBsZWZ0ICsgdHJpZ2dlckVsQm91bmRzLndpZHRoO1xuXG4gIGNvbnN0IGNvbGxpc2lvblRvcCA9IHRvcCAtIGhlaWdodCA8IDA7XG4gIGNvbnN0IGNvbGxpc2lvbkJvdHRvbSA9IGJvdHRvbSArIGhlaWdodCA+ICh3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCk7XG4gIGNvbnN0IGNvbGxpc2lvbkxlZnQgPSBsZWZ0IC0gd2lkdGggPCAwO1xuICBjb25zdCBjb2xsaXNpb25SaWdodCA9IHJpZ2h0ICsgd2lkdGggPiAod2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKTtcbiAgY29uc3QgY29sbGlzaW9uQWxsID0gY29sbGlzaW9uVG9wICYmIGNvbGxpc2lvbkJvdHRvbSAmJiBjb2xsaXNpb25MZWZ0ICYmIGNvbGxpc2lvblJpZ2h0O1xuXG4gIC8vIEdlbmVyYXRlIFggJiBZIHBvc2l0aW9uIHZhbHVlc1xuICBpZiAoY29sbGlzaW9uQm90dG9tKSB7XG4gICAgdXNlUG9zaXRpb25ZID0gJ3RvcCc7XG4gIH1cblxuICBpZiAoY29sbGlzaW9uVG9wKSB7XG4gICAgdXNlUG9zaXRpb25ZID0gJ2JvdHRvbSc7XG4gIH1cblxuICBpZiAoY29sbGlzaW9uTGVmdCkge1xuICAgIHVzZVBvc2l0aW9uWCA9ICdyaWdodCc7XG4gIH1cblxuICBpZiAoY29sbGlzaW9uUmlnaHQpIHtcbiAgICB1c2VQb3NpdGlvblggPSAnbGVmdCc7XG4gIH1cblxuXG4gIC8vIENob29zZSB0aGUgbGFyZ2VzdCBnYXAgYXZhaWxhYmxlXG4gIGlmIChjb2xsaXNpb25BbGwpIHtcbiAgICBjb25zdCBwb3N0aW9ucyA9IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ107XG4gICAgcmV0dXJuIHBvc3Rpb25zLnJlZHVjZSgocHJldiwgbmV4dCkgPT4gZWxCb3VuZHNbcHJldl0gPiBlbEJvdW5kc1tuZXh0XSA/IHByZXYgOiBuZXh0KTtcbiAgfVxuXG4gIGlmICgoY29sbGlzaW9uTGVmdCAmJiBjb2xsaXNpb25SaWdodCkpIHtcbiAgICBpZiAoY29sbGlzaW9uVG9wKSB7IHJldHVybiAnYm90dG9tJzsgfVxuICAgIGlmIChjb2xsaXNpb25Cb3R0b20pIHsgcmV0dXJuICd0b3AnOyB9XG4gICAgcmV0dXJuIHRvcCA+IGJvdHRvbSA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIH1cblxuICBpZiAoKGNvbGxpc2lvblRvcCAmJiBjb2xsaXNpb25Cb3R0b20pKSB7XG4gICAgaWYgKGNvbGxpc2lvbkxlZnQpIHsgcmV0dXJuICdyaWdodCc7IH1cbiAgICBpZiAoY29sbGlzaW9uUmlnaHQpIHsgcmV0dXJuICdsZWZ0JzsgfVxuICAgIHJldHVybiBsZWZ0ID4gcmlnaHQgPyAnbGVmdCcgOiAncmlnaHQnO1xuICB9XG5cbiAgcmV0dXJuIGAke3VzZVBvc2l0aW9uWX0tJHt1c2VQb3NpdGlvblh9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdElFKCk6IGJvb2xlYW4gfCBudW1iZXIge1xuICBsZXQgdWEgPSAnJztcblxuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGNvbnN0IG1zaWUgPSB1YS5pbmRleE9mKCdtc2llICcpO1xuXG4gIGlmIChtc2llID4gMCkge1xuICAgIC8vIElFIDEwIG9yIG9sZGVyID0+IHJldHVybiB2ZXJzaW9uIG51bWJlclxuICAgIHJldHVybiBwYXJzZUludCh1YS5zdWJzdHJpbmcobXNpZSArIDUsIHVhLmluZGV4T2YoJy4nLCBtc2llKSksIDEwKTtcbiAgfVxuXG4gIC8vIE90aGVyIGJyb3dzZXJcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdGV4dF0nXG59KVxuZXhwb3J0IGNsYXNzIFRleHREaXJlY3RpdmUge1xuICBASW5wdXQoKSByZzogbnVtYmVyO1xuICBASW5wdXQoKSB0ZXh0OiBhbnk7XG5cbiAgQE91dHB1dCgpIG5ld1ZhbHVlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQEhvc3RMaXN0ZW5lcignaW5wdXQnLCBbJyRldmVudCddKSBpbnB1dENoYW5nZShldmVudDogYW55KTogdm9pZCB7XG4gICAgY29uc3QgdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG5cbiAgICBpZiAodGhpcy5yZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm5ld1ZhbHVlLmVtaXQodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBudW1lcmljID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG5cbiAgICAgIHRoaXMubmV3VmFsdWUuZW1pdCh7IHY6IG51bWVyaWMsIHJnOiB0aGlzLnJnIH0pO1xuICAgIH1cbiAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc2xpZGVyXSdcbn0pXG5leHBvcnQgY2xhc3MgU2xpZGVyRGlyZWN0aXZlIHtcbiAgcHJpdmF0ZSBsaXN0ZW5lck1vdmU6IGFueTtcbiAgcHJpdmF0ZSBsaXN0ZW5lclN0b3A6IGFueTtcblxuICBASW5wdXQoKSByZ1g6IG51bWJlcjtcbiAgQElucHV0KCkgcmdZOiBudW1iZXI7XG5cbiAgQElucHV0KCkgc2xpZGVyOiBzdHJpbmc7XG5cbiAgQE91dHB1dCgpIGRyYWdFbmQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBkcmFnU3RhcnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQE91dHB1dCgpIG5ld1ZhbHVlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2Vkb3duJywgWyckZXZlbnQnXSkgbW91c2VEb3duKGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXJ0KGV2ZW50KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBbJyRldmVudCddKSB0b3VjaFN0YXJ0KGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXJ0KGV2ZW50KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICB0aGlzLmxpc3RlbmVyTW92ZSA9IChldmVudDogYW55KSA9PiB0aGlzLm1vdmUoZXZlbnQpO1xuXG4gICAgdGhpcy5saXN0ZW5lclN0b3AgPSAoKSA9PiB0aGlzLnN0b3AoKTtcbiAgfVxuXG4gIHByaXZhdGUgbW92ZShldmVudDogYW55KTogdm9pZCB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIHRoaXMuc2V0Q3Vyc29yKGV2ZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhcnQoZXZlbnQ6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuc2V0Q3Vyc29yKGV2ZW50KTtcblxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubGlzdGVuZXJTdG9wKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMubGlzdGVuZXJTdG9wKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmxpc3RlbmVyTW92ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5saXN0ZW5lck1vdmUpO1xuXG4gICAgdGhpcy5kcmFnU3RhcnQuZW1pdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdG9wKCk6IHZvaWQge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmxpc3RlbmVyU3RvcCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLmxpc3RlbmVyU3RvcCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5saXN0ZW5lck1vdmUpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMubGlzdGVuZXJNb3ZlKTtcblxuICAgIHRoaXMuZHJhZ0VuZC5lbWl0KCk7XG4gIH1cblxuICBwcml2YXRlIGdldFgoZXZlbnQ6IGFueSk6IG51bWJlciB7XG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBjb25zdCBwYWdlWCA9IChldmVudC5wYWdlWCAhPT0gdW5kZWZpbmVkKSA/IGV2ZW50LnBhZ2VYIDogZXZlbnQudG91Y2hlc1swXS5wYWdlWDtcblxuICAgIHJldHVybiBwYWdlWCAtIHBvc2l0aW9uLmxlZnQgLSB3aW5kb3cucGFnZVhPZmZzZXQ7XG4gIH1cblxuICBwcml2YXRlIGdldFkoZXZlbnQ6IGFueSk6IG51bWJlciB7XG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBjb25zdCBwYWdlWSA9IChldmVudC5wYWdlWSAhPT0gdW5kZWZpbmVkKSA/IGV2ZW50LnBhZ2VZIDogZXZlbnQudG91Y2hlc1swXS5wYWdlWTtcblxuICAgIHJldHVybiBwYWdlWSAtIHBvc2l0aW9uLnRvcCAtIHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgfVxuXG4gIHByaXZhdGUgc2V0Q3Vyc29yKGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY29uc3QgeCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMuZ2V0WChldmVudCksIHdpZHRoKSk7XG4gICAgY29uc3QgeSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMuZ2V0WShldmVudCksIGhlaWdodCkpO1xuXG4gICAgaWYgKHRoaXMucmdYICE9PSB1bmRlZmluZWQgJiYgdGhpcy5yZ1kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5uZXdWYWx1ZS5lbWl0KHsgczogeCAvIHdpZHRoLCB2OiAoMSAtIHkgLyBoZWlnaHQpLCByZ1g6IHRoaXMucmdYLCByZ1k6IHRoaXMucmdZIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5yZ1ggPT09IHVuZGVmaW5lZCAmJiB0aGlzLnJnWSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm5ld1ZhbHVlLmVtaXQoeyB2OiB5IC8gaGVpZ2h0LCByZ1k6IHRoaXMucmdZIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5yZ1ggIT09IHVuZGVmaW5lZCAmJiB0aGlzLnJnWSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm5ld1ZhbHVlLmVtaXQoeyB2OiB4IC8gd2lkdGgsIHJnWDogdGhpcy5yZ1ggfSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTbGlkZXJQb3NpdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBoOiBudW1iZXIsIHB1YmxpYyBzOiBudW1iZXIsIHB1YmxpYyB2OiBudW1iZXIsIHB1YmxpYyBhOiBudW1iZXIpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBTbGlkZXJEaW1lbnNpb24ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgaDogbnVtYmVyLCBwdWJsaWMgczogbnVtYmVyLCBwdWJsaWMgdjogbnVtYmVyLCBwdWJsaWMgYTogbnVtYmVyKSB7fVxufVxuIl19