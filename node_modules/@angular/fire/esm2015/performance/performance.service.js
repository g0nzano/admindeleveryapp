import { ApplicationRef, Injectable } from '@angular/core';
import { first, tap } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
const IS_STABLE_START_MARK = '_isStableStart';
const IS_STABLE_END_MARK = '_isStableEnd';
function markStarts() {
    if (typeof (window) !== 'undefined' && window.performance) {
        window.performance.mark(IS_STABLE_START_MARK);
        return true;
    }
    else {
        return false;
    }
}
const started = markStarts();
export class PerformanceMonitoringService {
    constructor(appRef) {
        if (started) {
            this.disposable = appRef.isStable.pipe(first(it => it), tap(() => {
                window.performance.mark(IS_STABLE_END_MARK);
                window.performance.measure('isStable', IS_STABLE_START_MARK, IS_STABLE_END_MARK);
            })).subscribe();
        }
    }
    ngOnDestroy() {
        if (this.disposable) {
            this.disposable.unsubscribe();
        }
    }
}
PerformanceMonitoringService.ɵfac = function PerformanceMonitoringService_Factory(t) { return new (t || PerformanceMonitoringService)(ɵngcc0.ɵɵinject(ApplicationRef)); };
PerformanceMonitoringService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PerformanceMonitoringService, factory: PerformanceMonitoringService.ɵfac });
/** @nocollapse */
PerformanceMonitoringService.ctorParameters = () => [
    { type: ApplicationRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PerformanceMonitoringService, [{
        type: Injectable
    }], function () { return [{ type: ApplicationRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2Uuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BlcmZvcm1hbmNlL3BlcmZvcm1hbmNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFdEUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFNUMsTUFBTSxvQkFBb0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUM5QyxNQUFNLGtCQUFrQixHQUFHLGNBQWMsQ0FBQztBQUUxQyxTQUFTLFVBQVU7QUFDbkIsSUFBSSxJQUFJLE9BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtBQUM5RCxRQUFRLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDdEQsUUFBUSxPQUFPLElBQUksQ0FBQztBQUNwQixLQUFLO0FBQUMsU0FBSztBQUNYLFFBQVEsT0FBTyxLQUFLLENBQUM7QUFDckIsS0FBSztBQUNMLENBQUM7QUFFRCxNQUFNLE9BQU8sR0FBRyxVQUFVLEVBQUUsQ0FBQztBQUc3QixNQUFNLE9BQU8sNEJBQTRCO0FBQUcsSUFJeEMsWUFBWSxNQUFzQjtBQUN0QyxRQUFRLElBQUksT0FBTyxFQUFFO0FBQ3JCLFlBQVksSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDbEMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQ2YsR0FBRyxDQUFDLEdBQUcsRUFBRTtBQUN6QixnQkFBb0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNoRSxnQkFBb0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDckcsWUFBZ0IsQ0FBQyxDQUFDLENBQ0wsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMxQixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXO0FBQ2YsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFBRSxZQUFBLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7QUFBQyxTQUFDO0FBQy9ELElBQUksQ0FBQztBQUNMO3dEQXBCQyxVQUFVO29KQUNUO0FBQUM7QUFBbUI7QUFFWixZQXJCRCxjQUFjO0FBQUc7Ozt3RUFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwbGljYXRpb25SZWYsIEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaXJzdCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBJU19TVEFCTEVfU1RBUlRfTUFSSyA9ICdfaXNTdGFibGVTdGFydCc7XG5jb25zdCBJU19TVEFCTEVfRU5EX01BUksgPSAnX2lzU3RhYmxlRW5kJztcblxuZnVuY3Rpb24gbWFya1N0YXJ0cygpIHtcbiAgICBpZiAodHlwZW9mKHdpbmRvdykgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgICAgICB3aW5kb3cucGVyZm9ybWFuY2UubWFyayhJU19TVEFCTEVfU1RBUlRfTUFSSyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmNvbnN0IHN0YXJ0ZWQgPSBtYXJrU3RhcnRzKCk7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQZXJmb3JtYW5jZU1vbml0b3JpbmdTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICAgIHByaXZhdGUgZGlzcG9zYWJsZTogU3Vic2NyaXB0aW9ufHVuZGVmaW5lZDtcblxuICAgIGNvbnN0cnVjdG9yKGFwcFJlZjogQXBwbGljYXRpb25SZWYpIHtcbiAgICAgICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zYWJsZSA9IGFwcFJlZi5pc1N0YWJsZS5waXBlKFxuICAgICAgICAgICAgICAgIGZpcnN0KGl0ID0+IGl0KSxcbiAgICAgICAgICAgICAgICB0YXAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucGVyZm9ybWFuY2UubWFyayhJU19TVEFCTEVfRU5EX01BUkspO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucGVyZm9ybWFuY2UubWVhc3VyZSgnaXNTdGFibGUnLCBJU19TVEFCTEVfU1RBUlRfTUFSSywgSVNfU1RBQkxFX0VORF9NQVJLKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKS5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5kaXNwb3NhYmxlKSB7IHRoaXMuZGlzcG9zYWJsZS51bnN1YnNjcmliZSgpOyB9XG4gICAgfVxuXG59XG4iXX0=