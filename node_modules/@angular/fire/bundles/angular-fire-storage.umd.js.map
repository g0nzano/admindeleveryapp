{"version":3,"file":"angular-fire-storage.umd.js","sources":["../../../src/storage/observable/fromTask.ts","../../../src/storage/task.ts","../../../src/storage/ref.ts","../../../src/storage/storage.ts","../../../src/storage/pipes/storageUrl.pipe.ts","../../../src/storage/storage.module.ts","../../../src/storage/angular-fire-storage.ts"],"names":["Observable","debounceTime","map","of","observeOn","switchMap","from","InjectionToken","ɵAngularFireSchedulers","ɵkeepUnstableUntilFirstFactory","ɵfirebaseAppFactory","ɵfetchInstance","Injectable","Inject","FIREBASE_OPTIONS","Optional","FIREBASE_APP_NAME","PLATFORM_ID","NgZone","AsyncPipe","Pipe","ChangeDetectorRef","NgModule"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { UploadTask, UploadTaskSnapshot } from '../interfaces';\n\n// need to import, else the types become import('firebase/app').default.storage.UploadTask\n// and it no longer works w/Firebase v7\nimport firebase from 'firebase/app';\n\n// Things aren't working great, I'm having to put in a lot of work-arounds for what\n// appear to be Firebase JS SDK bugs https://github.com/firebase/firebase-js-sdk/issues/4158\nexport function fromTask(task: UploadTask) {\n  return new Observable<UploadTaskSnapshot>(subscriber => {\n    const progress = (snap: UploadTaskSnapshot) => subscriber.next(snap);\n    const error = e => subscriber.error(e);\n    const complete = () => subscriber.complete();\n    // emit the current snapshot, so they don't have to wait for state_changes\n    // to fire next... this is stale if the task is no longer running :(\n    progress(task.snapshot);\n    const unsub = task.on('state_changed', progress);\n    // it turns out that neither task snapshot nor 'state_changed' fire the last\n    // snapshot before completion, the one with status 'success\" and 100% progress\n    // so let's use the promise form of the task for that\n    task.then(snapshot => {\n      progress(snapshot);\n      complete();\n    }, e => {\n      // TODO investigate, again this is stale, we never fire a canceled or error it seems\n      progress(task.snapshot);\n      error(e);\n    });\n    // on's type if Function, rather than () => void, need to wrap\n    return function unsubscribe() {\n      unsub();\n    };\n  }).pipe(\n    // deal with sync emissions from first emitting `task.snapshot`, this makes sure\n    // that if the task is already finished we don't emit the old running state\n    debounceTime(0)\n  );\n}\n","import { UploadTask, UploadTaskSnapshot } from './interfaces';\nimport { fromTask } from './observable/fromTask';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface AngularFireUploadTask {\n  task: UploadTask;\n  snapshotChanges(): Observable<UploadTaskSnapshot | undefined>;\n  percentageChanges(): Observable<number | undefined>;\n  pause(): boolean;\n  cancel(): boolean;\n  resume(): boolean;\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshot) => any) | null,\n    onRejected?: ((a: Error) => any) | null\n  ): Promise<any>;\n  catch(onRejected: (a: Error) => any): Promise<any>;\n}\n\n/**\n * Create an AngularFireUploadTask from a regular UploadTask from the Storage SDK.\n * This method creates an observable of the upload and returns on object that provides\n * multiple methods for controlling and monitoring the file upload.\n */\nexport function createUploadTask(task: UploadTask): AngularFireUploadTask {\n  const inner$ = fromTask(task);\n  return {\n    task,\n    then: task.then.bind(task),\n    catch: task.catch.bind(task),\n    pause: task.pause.bind(task),\n    cancel: task.cancel.bind(task),\n    resume: task.resume.bind(task),\n    snapshotChanges: () => inner$,\n    percentageChanges: () => inner$.pipe(\n      map(s => s.bytesTransferred / s.totalBytes * 100)\n    )\n  };\n}\n","import { ListResult, Reference, SettableMetadata, StringFormat, UploadMetadata } from './interfaces';\nimport { AngularFireUploadTask, createUploadTask } from './task';\nimport { from, Observable, of } from 'rxjs';\nimport { ɵAngularFireSchedulers } from '@angular/fire';\nimport { observeOn, switchMap } from 'rxjs/operators';\n\nexport interface AngularFireStorageReference {\n  getDownloadURL(): Observable<any>;\n  getMetadata(): Observable<any>;\n  delete(): Observable<any>;\n  child(path: string): any;\n  updateMetadata(meta: SettableMetadata): Observable<any>;\n  put(data: any, metadata?: UploadMetadata | undefined): AngularFireUploadTask;\n  putString(data: string, format?: string | undefined, metadata?: UploadMetadata | undefined): AngularFireUploadTask;\n  listAll(): Observable<ListResult>;\n}\n\n/**\n * Create an AngularFire wrapped Storage Reference. This object\n * creates observable methods from promise based methods.\n */\nexport function createStorageRef(\n  ref: Reference,\n  schedulers: ɵAngularFireSchedulers,\n  keepUnstableUntilFirst: <T>(obs$: Observable<T>) => Observable<T>\n): AngularFireStorageReference {\n  return {\n    getDownloadURL: () => of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => ref.getDownloadURL()),\n      keepUnstableUntilFirst\n    ),\n    getMetadata: () => of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => ref.getMetadata()),\n      keepUnstableUntilFirst\n    ),\n    delete: () => from(ref.delete()),\n    child: (path: string) => createStorageRef(ref.child(path), schedulers, keepUnstableUntilFirst),\n    updateMetadata: (meta: SettableMetadata) => from(ref.updateMetadata(meta)),\n    put: (data: any, metadata?: UploadMetadata) => {\n      const task = ref.put(data, metadata);\n      return createUploadTask(task);\n    },\n    putString: (data: string, format?: StringFormat, metadata?: UploadMetadata) => {\n      const task = ref.putString(data, format, metadata);\n      return createUploadTask(task);\n    },\n    listAll: () => from(ref.listAll())\n  };\n}\n","import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { createStorageRef } from './ref';\nimport { Observable } from 'rxjs';\nimport {\n  FIREBASE_APP_NAME,\n  FIREBASE_OPTIONS,\n  FirebaseAppConfig,\n  FirebaseOptions,\n  ɵAngularFireSchedulers,\n  ɵfetchInstance,\n  ɵfirebaseAppFactory,\n  ɵkeepUnstableUntilFirstFactory\n} from '@angular/fire';\nimport { UploadMetadata } from './interfaces';\nimport 'firebase/storage';\nimport firebase from 'firebase/app';\n\nexport const BUCKET = new InjectionToken<string>('angularfire2.storageBucket');\nexport const MAX_UPLOAD_RETRY_TIME = new InjectionToken<number>('angularfire2.storage.maxUploadRetryTime');\nexport const MAX_OPERATION_RETRY_TIME = new InjectionToken<number>('angularfire2.storage.maxOperationRetryTime');\n\n/**\n * AngularFireStorage Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for uploading and downloading binary files from Cloud Storage for\n * Firebase.\n */\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireStorage {\n  public readonly storage: firebase.storage.Storage;\n\n  public readonly keepUnstableUntilFirst: <T>(obs: Observable<T>) => Observable<T>;\n  public readonly schedulers: ɵAngularFireSchedulers;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string | FirebaseAppConfig | null | undefined,\n    @Optional() @Inject(BUCKET) storageBucket: string | null,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone,\n    @Optional() @Inject(MAX_UPLOAD_RETRY_TIME) maxUploadRetryTime: number | any,\n    @Optional() @Inject(MAX_OPERATION_RETRY_TIME) maxOperationRetryTime: number | any,\n  ) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n    const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n\n    this.storage = ɵfetchInstance(`${app.name}.storage.${storageBucket}`, 'AngularFireStorage', app, () => {\n      const storage = zone.runOutsideAngular(() => app.storage(storageBucket || undefined));\n      if (maxUploadRetryTime) {\n        storage.setMaxUploadRetryTime(maxUploadRetryTime);\n      }\n      if (maxOperationRetryTime) {\n        storage.setMaxOperationRetryTime(maxOperationRetryTime);\n      }\n      return storage;\n    }, [maxUploadRetryTime, maxOperationRetryTime]);\n  }\n\n  ref(path: string) {\n    return createStorageRef(this.storage.ref(path), this.schedulers, this.keepUnstableUntilFirst);\n  }\n\n  refFromURL(path: string) {\n    return createStorageRef(this.storage.refFromURL(path), this.schedulers, this.keepUnstableUntilFirst);\n  }\n\n  upload(path: string, data: any, metadata?: UploadMetadata) {\n    const storageRef = this.storage.ref(path);\n    const ref = createStorageRef(storageRef, this.schedulers, this.keepUnstableUntilFirst);\n    return ref.put(data, metadata);\n  }\n\n}\n","import { AsyncPipe } from '@angular/common';\nimport { ChangeDetectorRef, NgModule, OnDestroy, Pipe, PipeTransform } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AngularFireStorage } from '../storage';\n\n/** to be used with in combination with | async */\n@Pipe({\n  name: 'getDownloadURL',\n  pure: false,\n})\nexport class GetDownloadURLPipe implements PipeTransform, OnDestroy {\n\n  private asyncPipe: AsyncPipe;\n  private path: string;\n  private downloadUrl$: Observable<any>;\n\n  constructor(private storage: AngularFireStorage, cdr: ChangeDetectorRef) {\n    this.asyncPipe = new AsyncPipe(cdr);\n  }\n\n  transform(path: string) {\n    if (path !== this.path) {\n      this.path = path;\n      this.downloadUrl$ = this.storage.ref(path).getDownloadURL();\n    }\n    return this.asyncPipe.transform(this.downloadUrl$);\n  }\n\n  ngOnDestroy() {\n    this.asyncPipe.ngOnDestroy();\n  }\n\n}\n\n@NgModule({\n  declarations: [ GetDownloadURLPipe ],\n  exports: [ GetDownloadURLPipe ],\n})\nexport class GetDownloadURLPipeModule {}\n","import { NgModule } from '@angular/core';\nimport { GetDownloadURLPipeModule } from './pipes/storageUrl.pipe';\nimport { AngularFireStorage } from './storage';\n\n@NgModule({\n  exports: [ GetDownloadURLPipeModule ],\n  providers: [ AngularFireStorage ]\n})\nexport class AngularFireStorageModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}